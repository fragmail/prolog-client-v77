//===========================================
// Данный программный продукт (обработка) распространяется 
// в соответствии с условиями и ограничениями лицензии
// Creative Commons Zero v1.0 Universal, с
// текстом которой можно ознакомиться на сайте организации:
// https://creativecommons.org/publicdomain/zero/1.0/
// Исходный код и авторские версии продукта можно найти в 
// публичном репозитории:
// https://github.com/fragmail/prolog-client-v77
//===========================================
// ХМЛ
//===========================================
// HTTP Request
//===========================================
// Модель развозки
//===========================================
Перем тзПунктыДоставки, тзМаршруты, Математика, сзСлЧис,
	сзГеоКоды, мРадиус;
//===========================================
// Управление элементами формы
//===========================================
Перем мШирина, мВысота, тзПривязки, тзАтрибуты, сзЦвета,
	тзСтатусыПереходов; 
//===========================================
// Управление картой
//===========================================
Перем Браузер, Карта, РазмерОтступа, мМаршрут;
//===========================================
// Prolog
//===========================================
Перем стрТекстЗапроса, стрИдЗапроса;
//===========================================
// Обработчики событий
//===========================================
Перем мРасшФорма, мВремяЗапроса;
//===========================================
// Интерфейс
//===========================================
// ХМЛ
//===========================================
// HTTP Request
//===========================================
// Модель развозки
//===========================================
Процедура АвтоПодборПунктовДоставки() Далее
Процедура ПоказатьПунктыДоставкиНаКарте() Далее
Процедура ВыполнитьГеокодированиеНачало() Далее
Процедура ПостроитьМаршрутыНачало() Далее
Функция   СоставитьСтрокуГеокодированияПунктовДоставки(ОбъемВыборки,
	стрГеокодирования) Далее 

Функция   СоставитьСтрокуГеокодированияМаршрута() Далее	
Процедура ДополнитьТаблицуМаршрутовДаннымиГеокодирования() Далее	
//===========================================
// Управление элементами формы
//===========================================
Процедура ПолучитьАктуальныеРазмерыКарты(Ш, В) Далее
Процедура ОтобразитьНаФормеРезультатВыбораТочкиНаКарте() Далее
Процедура ОтобразитьЧислоЗаданийКарты(Колво) Далее
Процедура НастройкаДоступаКРеквизитамФормы(Статус) Далее
//===========================================
// Управление картой
//===========================================
Функция   СтатусКарты(Статус = "") Далее
Процедура ЗадатьРазмерыКарты(Ш, В) Далее
Функция   УстановитьОтметкуНаКарте(Широта, 
	Долгота, Маркер = "", Подсказка = "") Далее

Процедура УдалитьПунктыДоставкиНаКарте() Далее	
Процедура ОтправитьЗапросНаГеокодирование(стрГеокодирования) Далее
Процедура ОтправитьЗапросНаМаршрутизацию(стрМаршрут) Далее
//===========================================
// Prolog
//===========================================
Функция	  ПолучитьСтруктуруИдПоследовательности(ИдПоследовательности) Далее
Функция   ПолучитьСтруктуруЗаказовРазвозки(ИмяРекВес = "Вес") Далее
Функция   ПолучитьЗаписьСтруктуры(сзДанные, Путь = "") Экспорт Далее
Процедура УстановитьЗначениеРеквизитаСтруктурыДанных(сзСтруктураДанных, 
	Значение, Представление) Далее

Процедура ПолучитьДанныеПриложения() Далее

Процедура ПередатьДополнительныеДанныеПриложения(стрТипЗапроса, 
	сзМашины, сзЗаказы) Далее
//===========================================                              
// Обработчики событий
//===========================================
Процедура ПриОбновленииДанныхТаблицыМаршрутов() Далее
//===========================================
// Интерфейс
//===========================================
// ХМЛ
//===========================================
Функция СоздатьНаборСхем(хмлНаборСхем)
	
	Попытка
		хмлНаборСхем = СоздатьОбъект("Msxml2.XMLSchemaCache.6.0");
	Исключение
		Сообщить(ОписаниеОшибки(), "!");
		Возврат 0;
	КонецПопытки;	
	
	Возврат 1;
	
КонецФункции
//===========================================
Функция СоздатьПарсер(хмлПарсер)
	
	Попытка
		хмлПарсер = СоздатьОбъект("Msxml2.DOMDocument.6.0");
	Исключение
		Сообщить(ОписаниеОшибки(), "!");
		Возврат 0;
	КонецПопытки;	
	
	Возврат 1;
	
КонецФункции	
//===========================================
Функция СоздатьДокумент(хмлПарсер, хмлНаборСхем) Экспорт
	
	Результат = ?(ТипЗначенияСтр(хмлНаборСхем)="OLE.IXMLDOMSchemaCollection2", 
		1, СоздатьНаборСхем(хмлНаборСхем)) * СоздатьПарсер(хмлПарсер);
	
	Если Результат = 1 Тогда
		
		хмлПарсер.Schemas = хмлНаборСхем;
		
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции
//===========================================
Функция ДобавитьАтрибут(хмлПарсер, хмлУзел, Ид, Значение) Экспорт
	
	хмлАтрибут = хмлПарсер.createAttribute(Ид);
	хмлАтрибут.value = Значение;
	хмлУзел.setAttributeNode(хмлАтрибут);
	
	Возврат 1;
	
КонецФункции
//===========================================
Функция ДобавитьСхемуИзФайла(хмлНаборСхем, URIПространстваИмен, ИмяФайла) Экспорт
	
	Возврат ?(Число(хмлНаборСхем.add(URIПространстваИмен, ИмяФайла))=0,1,0);
	
КонецФункции	
//===========================================
Функция ЗагрузитьСхемыПоСписку(хмлНаборСхем, спНаборСхем="") Экспорт
	Перем URIПространстваИмен, ИмяФайла;
	
	Если ТипЗначенияСтр(спНаборСхем)="СписокЗначений" Тогда
		Для й = 1 По спНаборСхем.РазмерСписка() Цикл
			ИмяФайла = спНаборСхем.ПолучитьЗначение(й, URIПространстваИмен);
			Если ДобавитьСхемуИзФайла(хмлНаборСхем, 
				URIПространстваИмен, ИмяФайла) = 0 Тогда
					Возврат 0;
			КонецЕсли;		
		КонецЦикла;
	КонецЕсли;	
	
	Возврат 1;
	
КонецФункции
//===========================================
Функция ПрочитатьДокументИзСтроки(хмлПарсер, хмлНаборСхем, спНаборСхем="", Стр="") Экспорт
	
	Попытка
		Результат = СоздатьДокумент(хмлПарсер, хмлНаборСхем)
			* ЗагрузитьСхемыПоСписку(хмлНаборСхем, спНаборСхем);
	Исключение
		Возврат 0;
	КонецПопытки;
	
	Если Результат = 0 Тогда
		Возврат Результат;
	КонецЕсли;	

	хмлПарсер.async = 0;
	хмлПарсер.SetProperty("MultipleErrorMessages", 1);
    хмлПарсер.loadXML(Стр);
	
	Ошибки = хмлПарсер.ParseError;
	Если Ошибки.ErrorCode <> 0 Тогда
		Результат = 0;
		Для й = 0 По Ошибки.AllErrors.length - 1 Цикл
			Ошибка = Ошибки.AllErrors(й);
			Сообщить("Ошибка: " + Лев(Ошибка.Reason 
				+ " " + Ошибка.SrcText, 350));
		КонецЦикла;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции
//===========================================
// HTTP Request
//===========================================
Процедура ЖурналВыполнения(стрТекстСообщения)
	
	Текст = СоздатьОбъект("Текст");
	
	Текст.Открыть(пИмяФайлаЖурнала);
	
	Текст.ДобавитьСтроку("" + ТекущаяДата() + "Т" 
		+ ТекущееВремя() + " " + стрТекстСообщения); 
		
	Текст.Записать(пИмяФайлаЖурнала);	
	
КонецПроцедуры
//===========================================
Функция ВыполнитьЗапрос(сзЗапрос, хмлОтвет)
    
	мВремяЗапроса = _GetPerformanceCounter(); 
	
	ТекстСообщения = "Запрос к серверу логистики";
	ЖурналВыполнения(ТекстСообщения);
	
	ТекстСообщения = сзЗапрос.Получить("ТекстЗапроса").xml;
	ЖурналВыполнения(ТекстСообщения);
	
	Соединение = СоздатьОбъект("WinHttp.WinHttpRequest.5.1"); 
	Соединение.Open("POST", сзЗапрос.Получить("Адрес"),  -1); 
	//Соединение.SetCredentials(сзЗапрос.Получить("ЛогинПрокси"), 
	//	сзЗапрос.Получить("ПарольПрокси"), 0);
	Соединение.Send(ТекстСообщения);
	
	Попытка

		Соединение.WaitForResponse(-1);

	Исключение

		ПрочитатьДокументИзСтроки(хмлОтвет, "", "", 
			"<error>HTTP The operation timed out</error>");
		
		ТекстСообщения = "Ответ сервера логистики";
		ЖурналВыполнения(ТекстСообщения);
		
		ТекстСообщения = хмлОтвет.xml;
		ЖурналВыполнения(ТекстСообщения);
		
		Возврат 0;

	КонецПопытки;
	
	Если Соединение.Status = 200 Тогда

		ТекстСообщения = "Ответ сервера логистики";
		ЖурналВыполнения(ТекстСообщения);
		
		ТекстСообщения = Соединение.ResponseText();
		ЖурналВыполнения(ТекстСообщения);
		
		ПрочитатьДокументИзСтроки(хмлОтвет, "", "",  
			ТекстСообщения);
		
		Возврат 1

	Иначе
    	
		ПрочитатьДокументИзСтроки(хмлОтвет, "", "", 
			"<error>HTTP " + Соединение.Status + " " 
				+ Соединение.StatusText + "</error>");

		ТекстСообщения = "Ответ сервера логистики";
		ЖурналВыполнения(ТекстСообщения);
		
		ТекстСообщения = хмлОтвет.xml;
		ЖурналВыполнения(ТекстСообщения);
		
		Возврат 0;

	КонецЕсли;

КонецФункции
//===========================================
// Модель развозки
//===========================================
Процедура ВыборкаПоМетодуМонтеКарло(КолвоСтрок) 
	
	сзСлЧис.УдалитьВсе();
	
	Математика.SRAND(_GetPerformanceCounter());
    
	КолвоСтрок = пОбъемВыборки - тзПунктыДоставки.КоличествоСтрок();
	
	КолвоИтераций = КолвоСтрок * 2;
	
	Для й = 1 По КолвоИтераций Цикл
		
		Значение = Математика.RAND1(); 
		
		сзСлЧис.ДобавитьЗначение(Значение);
		
	КонецЦикла;
	
КонецПроцедуры
//===========================================
Процедура СоставитьКоординатыПоМодельнымДанным(КолвоСтрок)
	
	Для й = 0 По КолвоСтрок - 1 Цикл
		
		тзПунктыДоставки.НоваяСтрока();
		тзПунктыДоставки.Уточнен = 0;
		
		тзПунктыДоставки.Широта = Окр(пШирота   + пДиаметр 
			* (сзСлЧис.ПолучитьЗначение(й * 2 + 1) - 0.5), 8);
		
		тзПунктыДоставки.Долгота = Окр(пДолгота + 2 * пДиаметр 
			* (сзСлЧис.ПолучитьЗначение(й * 2 + 2) - 0.5), 8);
		
	КонецЦикла; 

КонецПроцедуры	
//===========================================
Процедура ВыполнитьГеокодированиеЗавершение()
	
	Если СтатусКарты() = "АвтоПодбор" Тогда
		
		АвтоПодборПунктовДоставки();
		
	Иначе	
		
		ДополнитьТаблицуМаршрутовДаннымиГеокодирования();
		
	КонецЕсли;	
	
КонецПроцедуры
//===========================================
Процедура ВыполнитьГеокодированиеИтерация()
	
	НС = тзПунктыДоставки.КоличествоСтрок(); 
	
	Пока НС > 0 Цикл
		
		тзПунктыДоставки.ПолучитьСтрокуПоНомеру(НС);
		
		Если (тзПунктыДоставки.Адрес = "undefined") и 
			(СтатусКарты() <> "Загрузка") Тогда
// в ходе моделирования, попали в область на карте, не содержащую адресной 
// информации - удалить строку из результатов моделирования				
			тзПунктыДоставки.УдалитьСтроку(НС);	
		КонецЕсли;
		
		НС = НС - 1;
		
	КонецЦикла;	
	
	ВыполнитьГеокодированиеНачало();
	
КонецПроцедуры
//===========================================
Процедура ВыполнитьГеокодированиеНачало()
	Перем стрГеокодирования;
	
	Если СоставитьСтрокуГеокодированияПунктовДоставки(10, стрГеокодирования) > 0 Тогда
		
		ОтправитьЗапросНаГеокодирование(стрГеокодирования);	
			
	Иначе
			
		ВыполнитьГеокодированиеЗавершение();
		
	КонецЕсли;	
	
КонецПроцедуры
//===========================================
Процедура ПостроитьМаршрутыЗавершение()
	
	Если тзМаршруты.КоличествоСтрок() > 0 Тогда
		
		СтатусКарты("ПередачаЗапроса");
	
		сзМашины = "";
					
		сзЗаказы = ПолучитьСтруктуруЗаказовРазвозки("Расстояние");		
		
		ПередатьДополнительныеДанныеПриложения("RANKING", сзМашины, сзЗаказы);
		
	КонецЕсли;
	
КонецПроцедуры
//===========================================
Процедура ПостроитьМаршрутыИтерация()
	Перем НС;
	
	Расстояние = Карта.RouteLength;
	
	Если тзМаршруты.НайтиЗначение(мМаршрут,	НС, "Маршрут") = 1 Тогда
		
		тзМаршруты.ПолучитьСтрокуПоНомеру(НС);
		
		Если Расстояние = 0 Тогда
			
			тзМаршруты.Маршрут = "НеРассчитан";
			
		Иначе
			
			тзМаршруты.Расстояние = Расстояние;
			
		КонецЕсли;	
		
	КонецЕсли;
	
	ПостроитьМаршрутыНачало();
	
КонецПроцедуры
//===========================================
Процедура ПостроитьМаршрутыНачало()
	
	СтатусКарты("ПостроениеМаршрутов");
	
	мМаршрут = СоставитьСтрокуГеокодированияМаршрута(); 
	
	Если мМаршрут = "НеНайден" Тогда

// выполнены все расчеты по текущей таблице маршрутов		
		ПостроитьМаршрутыЗавершение();
		
	ИначеЕсли мМаршрут = "НеРассчитан" Тогда
		
// в ходе обработки идентификаторов в таблице маршрутов возникла ошибка
		СтатусКарты("Готово");
	
	Иначе
	
		ОтправитьЗапросНаМаршрутизацию(мМаршрут);
	
	КонецЕсли;
	
КонецПроцедуры	
//===========================================
Процедура АвтоПодборПунктовДоставки()
	Перем КолвоСтрок;
	
	ВыборкаПоМетодуМонтеКарло(КолвоСтрок); 
	
	Если КолвоСтрок > 0 Тогда
		
		СоставитьКоординатыПоМодельнымДанным(КолвоСтрок);		
			
		ВыполнитьГеокодированиеНачало();
			
	Иначе
// выполнили план по подборке пунктов доставки
		ДополнитьТаблицуМаршрутовДаннымиГеокодирования();
		
	КонецЕсли;	
	
КонецПроцедуры
//===========================================
Процедура ПодготовитьТаблицы()
	
	УдалитьПунктыДоставкиНаКарте();
	
	тзПунктыДоставки.УдалитьСтроки();
	
	тзМаршруты.УдалитьСтроки();
	
КонецПроцедуры
//===========================================
Процедура СкопироватьГеоданные(Объект1, Префикс1, Объект2, Префикс2)
	
	сзРеквизиты = СоздатьОбъект("СписокЗначений");
	сзРеквизиты.ИзСтрокиСРазделителями("""Ид"",""Адрес"",""Широта"",""Долгота"",""Область""");

	Для й = 1 По сзРеквизиты.РазмерСписка() Цикл
		
		ИмяРек = сзРеквизиты.ПолучитьЗначение(й);
		
		Объект1.УстановитьЗначение(Объект1.НомерСтроки, Префикс1 + ИмяРек, 
			Объект2.ПолучитьЗначение(Объект2.НомерСтроки, Префикс2 + ИмяРек));
				
	КонецЦикла;
	
КонецПроцедуры
//===========================================
Процедура ПодготовитьДанныеДляГеокодирования()
	
	тзМаршруты.ВыбратьСтроки();
	
	Пока тзМаршруты.ПолучитьСтроку() = 1 Цикл
		
		НС = 0;
		
		Если тзПунктыДоставки.НайтиЗначение(тзМаршруты
			.ОткудаИд, НС, "Ид") = 0 Тогда
				
			тзПунктыДоставки.НоваяСтрока();
			тзПунктыДоставки.Уточнен = 0;
			
			СкопироватьГеоданные(тзПунктыДоставки, "", тзМаршруты, "Откуда");
			
		КонецЕсли;
		
		НС = 0;
		
		Если тзПунктыДоставки.НайтиЗначение(тзМаршруты
			.КудаИд,   НС, "Ид") = 0 Тогда
				
			тзПунктыДоставки.НоваяСтрока();
			тзПунктыДоставки.Уточнен = 0;
			
			СкопироватьГеоданные(тзПунктыДоставки, "", тзМаршруты, "Куда");
			
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры
//===========================================
Процедура СоздатьТаблицуМаршрутов()
	
	Для НС = 2 По тзПунктыДоставки.КоличествоСтрок() Цикл
		
		тзМаршруты.НоваяСтрока();
		
		тзПунктыДоставки.ПолучитьСтрокуПоНомеру(1);
		СкопироватьГеоданные(тзМаршруты, "Откуда", тзПунктыДоставки, "");
		
		тзПунктыДоставки.ПолучитьСтрокуПоНомеру(НС);
		СкопироватьГеоданные(тзМаршруты, "Куда", тзПунктыДоставки, "");
		
		тзМаршруты.ИдПоследовательности = "00-" 
			+ Формат(НС - 1, "Ч(0)3") + "-001";
		
	КонецЦикла;	
	
КонецПроцедуры	
//===========================================
Процедура ОбновитьДанныеТаблицыМаршрутов()
	
	тзМаршруты.ВыбратьСтроки();
	
	Пока тзМаршруты.ПолучитьСтроку() = 1 Цикл
		
		НС = 0;
		
		Если тзПунктыДоставки.НайтиЗначение(тзМаршруты
			.ОткудаИд, НС, "Ид") = 1 Тогда
				
			тзПунктыДоставки.ПолучитьСтрокуПоНомеру(НС);
			СкопироватьГеоданные(тзМаршруты, "Откуда", тзПунктыДоставки, "");
			
		КонецЕсли;
		
		НС = 0;
		
		Если тзПунктыДоставки.НайтиЗначение(тзМаршруты
			.КудаИд,   НС, "Ид") = 1 Тогда
				
			тзПунктыДоставки.ПолучитьСтрокуПоНомеру(НС);
			СкопироватьГеоданные(тзМаршруты, "Куда", тзПунктыДоставки, "");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры	
//===========================================
Процедура ДополнитьТаблицуМаршрутовДаннымиГеокодирования()
	
	Если тзМаршруты.КоличествоСтрок() = 0 Тогда
		
		СоздатьТаблицуМаршрутов();
		
	Иначе
	
		ОбновитьДанныеТаблицыМаршрутов(); 
		
	КонецЕсли;	
	
	ПриОбновленииДанныхТаблицыМаршрутов();
	
КонецПроцедуры	
//===========================================
Функция СоставитьСтрокуГеокодированияПунктовДоставки( // подготовка строки для запроса 
						// на геокодирование, возвращает значение - количество пунктов 
						// доставки в запросе. Параметры:
	ОбъемВыборки,   	// ограничение количества пунктов доставки в одном запросе
	стрГеокодирования  	// строка запроса
	)
	
	стрГеокодирования = "";
	сзГеоКоды.УдалитьВсе();
	
	КолвоОтправлено = 0;
	
	тзПунктыДоставки.ВыбратьСтроки();
	Пока тзПунктыДоставки.ПолучитьСтроку() = 1 Цикл
		
		Если тзПунктыДоставки.Уточнен = 0 Тогда
			
			стрГеокодирования = стрГеокодирования 
				+ ?(стрГеокодирования = "", "", ",");
			
			Если ПустоеЗначение(тзПунктыДоставки.Широта) = 0 Тогда

				стрГеокодирования = стрГеокодирования + "'" 
					+ Формат(тзПунктыДоставки.Широта,  "Ч10.6") + "," 
					+ Формат(тзПунктыДоставки.Долгота, "Ч10.6") + "'";	
				
			Иначе

				стрГеокодирования = стрГеокодирования + "'" 
					+ тзПунктыДоставки.Адрес + "," 
					+ тзПунктыДоставки.Область + "'";
				
			КонецЕсли;
			
			КолвоОтправлено = КолвоОтправлено + 1;
			
			сзГеоКоды.Установить(КолвоОтправлено, 
				тзПунктыДоставки.НомерСтроки);
			
			Если КолвоОтправлено = ОбъемВыборки Тогда
				
				Прервать;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	
    
	стрГеокодирования = "objToGeocode = [" + стрГеокодирования + "]";
	
	Возврат КолвоОтправлено;
	
КонецФункции	
//===========================================
Функция СоставитьСтрокуГеокодированияМаршрута()
	Перем НС;
	
	мМаршрут = "НеРассчитан";
	
	Если тзМаршруты.НайтиЗначение(мМаршрут, НС, "Маршрут") = 1 Тогда
		
		сзИд = ПолучитьСтруктуруИдПоследовательности(тзМаршруты
			.ПолучитьЗначение(НС, "ИдПоследовательности"));
			
		ИдКоманды = сзИд.ПолучитьЗначение(1);	
		
		Если ИдКоманды = "00" Тогда
			
			тзМаршруты.ПолучитьСтрокуПоНомеру(НС);
// прямой маршрут			
			мМаршрут = "[" + тзМаршруты.ОткудаШирота + "," 
				+ тзМаршруты.ОткудаДолгота + "],[" + тзМаршруты.КудаШирота + ","
				+ тзМаршруты.КудаДолгота + "]";
		
		ИначеЕсли ИдКоманды = "99" Тогда
            
			ИдПодгруппы = сзИд.ПолучитьЗначение(3);
			
// таблица маршрутов отсортирована по идентификатору последовательности	(нумерация с 1)			
			НС = НС + 1 - Число(ИдПодгруппы);
						
			тзМаршруты.ПолучитьСтрокуПоНомеру(НС);
			
			мМаршрут = "[" + тзМаршруты.ОткудаШирота + "," 
				+ тзМаршруты.ОткудаДолгота + "]";

			ИдГруппы = сзИд.ПолучитьЗначение(2);				
			
			Пока ИдГруппы = сзИд.ПолучитьЗначение(2) Цикл
			
				тзМаршруты.ПолучитьСтрокуПоНомеру(НС);
				
// собираем всю последовательность в маршрут с указанием этапов следования
				мМаршрут = мМаршрут + ",[" + тзМаршруты.КудаШирота 
					+ "," + тзМаршруты.КудаДолгота + "]";
					
				тзМаршруты.Маршрут = "-";
				тзМаршруты.Расстояние = 0;
				
				НС = НС + 1;

				Если НС <= тзМаршруты.КоличествоСтрок() Тогда
				
					сзИд = ПолучитьСтруктуруИдПоследовательности(тзМаршруты
						.ПолучитьЗначение(НС, "ИдПоследовательности"));
				Иначе
				
					Прервать;
					
				КонецЕсли;	
				
			КонецЦикла;	
				
		Иначе
			
			Сообщить("Ошибка, неверный код команд: " + ИдКоманды);
			
			Возврат "НеРассчитан";
				
		КонецЕсли;
		
		тзМаршруты.КлючСтроки = мМаршрут;
		
		Возврат мМаршрут;
		
	Иначе

		Возврат "НеНайден";
		
	КонецЕсли;	
	
КонецФункции	
//===========================================
Процедура ЗагрузитьМаршрутыИзФайла(ПолноеИмяФайла)
	
	ПодготовитьТаблицы();
	
	Текст = СоздатьОбъект("Текст");
	
	Текст.Открыть(ПолноеИмяФайла);
	
	Для НС = 1 По Текст.КоличествоСтрок() Цикл
		
		стрДанные = Текст.ПолучитьСтроку(НС);
		
		тДанные = СтрЗаменить(стрДанные, ";", РазделительСтрок);
		
		тзМаршруты.НоваяСтрока();
		
		Для НК = 1 По СтрКоличествоСтрок(тДанные) Цикл
			
			тзМаршруты.УстановитьЗначение(тзМаршруты.НомерСтроки, НК,
				СтрПолучитьСтроку(тДанные, НК));
				
		КонецЦикла;		
		
		тзМаршруты.ИдПоследовательности = "00-" 
			+ Формат(НС, "Ч(0)3") + "-001";
			
	КонецЦикла; 
	
	ПодготовитьДанныеДляГеокодирования();
	
КонецПроцедуры
//===========================================
Процедура ВыгрузитьМаршрутыВФайл();
	
	Текст = СоздатьОбъект("Текст");
	
    Для НС = 1 По тзМаршруты.КоличествоСтрок() Цикл
		
		стрДанные = "";
		
		Для НК = 1 По тзМаршруты.КоличествоКолонок() Цикл
			
			стрДанные = стрДанные + ?(стрДанные = "", "", ";") 
				+ тзМаршруты.ПолучитьЗначение(НС, НК);
	
		КонецЦикла;
			
		Текст.ДобавитьСтроку(стрДанные);
		
	КонецЦикла;
	
	Текст.Показать("Таблица маршрутов");
	
КонецПроцедуры	
//===========================================
Процедура ОбработатьРезультатПодбораПунктаДоставки()
	
	тзПунктыДоставки.НоваяСтрока();
	тзПунктыДоставки.Широта  = Карта.UserPointCoordX;
	тзПунктыДоставки.Долгота = Карта.UserPointCoordY;
	тзПунктыДоставки.Уточнен = 0;
	
	тзПунктыДоставки.ГеоОбъект = УстановитьОтметкуНаКарте(тзПунктыДоставки.Широта, 
		тзПунктыДоставки.Долгота,  тзПунктыДоставки.НомерСтроки);
		
КонецПроцедуры
//===========================================
Процедура ПоказатьПунктыДоставкиНаКарте()
	
	тзПунктыДоставки.ВыбратьСтроки();
	Пока тзПунктыДоставки.ПолучитьСтроку() = 1 Цикл
		
		тзПунктыДоставки.ГеоОбъект = УстановитьОтметкуНаКарте(тзПунктыДоставки.Широта, 
			тзПунктыДоставки.Долгота,  тзПунктыДоставки.НомерСтроки);	
		
	КонецЦикла;	
	
КонецПроцедуры	
//===========================================
// Управление элементами формы
//===========================================
Функция Присвоить(А, В)
	
	А = В;
	
КонецФункции
//===========================================
Процедура ОтобразитьЧислоЗаданийКарты(Колво)
	
	Форма.пЗаданийКарты.Заголовок(Колво);
	
КонецПроцедуры
//===========================================
Процедура ОтобразитьНаФормеРезультатВыбораТочкиНаКарте()
	
	Форма.нШирота .Заголовок(Карта.UserPointCoordX);
	Форма.нДолгота.Заголовок(Карта.UserPointCoordY);
	
КонецПроцедуры	
//===========================================
Процедура ВывестиТаблицуВТаблицуЗначений(ИмяТаблицы, ТабЗнач)
	
	Таблица = СоздатьОбъект("Таблица");
	Таблица.ИсходнаяТаблица(ИмяТаблицы);
	
	Таблица.Вывести();
	
	ТабЗнач = СоздатьОбъект("ТаблицаЗначений");
	
	Для НК = 1 По Таблица.ШиринаТаблицы() Цикл
		
		ТабЗнач.НоваяКолонка(Таблица.Область(1, НК).Текст);
		
	КонецЦикла;	
	
	Для НС = 2 По Таблица.ВысотаТаблицы() Цикл
		
		ТабЗнач.НоваяСтрока();
		
		Для НК = 1 По Таблица.ШиринаТаблицы() Цикл
			
			ТабЗнач.УстановитьЗначение(НС - 1, НК, 
				Таблица.Область(НС, НК).Текст);
			
		КонецЦикла;
		
	КонецЦикла;	
	
КонецПроцедуры	
//===========================================
Процедура ЗадатьНачальныеНастройки()
	
	ВывестиТаблицуВТаблицуЗначений("Привязки", тзПривязки);  
	
	ВывестиТаблицуВТаблицуЗначений("СтатусыПереходов", тзСтатусыПереходов);
	
КонецПроцедуры
//===========================================
Функция ЗаписаныПарамерыГлавногоОкна()
	
	Возврат 1 - ПустоеЗначение(мШирина);
	
КонецФункции	
//===========================================
Процедура СохранитьПараметрыГлавногоОкна()
    Перем Х, У, Ш, В;
	
	РасшФорма = СоздатьОбъект("РасширениеФормы");
	РасшФорма.УстановитьФорму(Форма);
	
	мШирина = РасшФорма.Ширина;
	мВысота = РасшФорма.Высота;
	
	тзПривязки.ВыбратьСтроки();
	Пока тзПривязки.ПолучитьСтроку() = 1 Цикл
		
		Атрибут = РасшФорма.ПолучитьАтрибут(тзПривязки.ИмяАтрибута);
		
		Атрибут.ПолучитьКоординаты(Х, У, Ш, В);
		
		Если тзАтрибуты.НайтиЗначение(тзПривязки.ИмяАтрибута,, 
			"ИмяАтрибута") = 0 Тогда
		
			тзАтрибуты.НоваяСтрока();
			тзАтрибуты.ИмяАтрибута = тзПривязки.ИмяАтрибута;
			тзАтрибуты.Х = Х; 
			тзАтрибуты.У = У;
			тзАтрибуты.Ш = Ш;
			тзАтрибуты.В = В;
		
		КонецЕсли;
				
	КонецЦикла;	
	
КонецПроцедуры	
//===========================================
Процедура ПолучитьАктуальныеРазмерыКарты(Ш, В)
	
	РасшФорма = СоздатьОбъект("РасширениеФормы");
	РасшФорма.УстановитьФорму(Форма);
	
	Атрибут = РасшФорма.ПолучитьАтрибут("пКарта");
	Атрибут.ПолучитьКоординаты(,, Ш, В);
			
КонецПроцедуры
//===========================================
Процедура НастроитьРазмерыКарты()
	Перем Ш, В;
	
	ПолучитьАктуальныеРазмерыКарты(Ш, В);
	
	ЗадатьРазмерыКарты(Ш, В);
	
КонецПроцедуры	
//===========================================
Функция ПолучитьПриращение(ИмяАтрибута, Показатель)
	Перем Х, У, Ш, В;
	
	РасшФорма = СоздатьОбъект("РасширениеФормы");
	РасшФорма.УстановитьФорму(Форма);
		
	Если ИмяАтрибута = "Форма" Тогда 
		
		Если Показатель = "Ш" Тогда
			Возврат РасшФорма.Ширина - мШирина;
		Иначе
			Возврат РасшФорма.Высота - мВысота;
		КонецЕсли;	
		
	Иначе
		
		НомСтрНастроек = 0;
		Если тзАтрибуты.НайтиЗначение(ИмяАтрибута, 
			НомСтрНастроек, "ИмяАтрибута") = 1 Тогда
										
			Атрибут = РасшФорма.ПолучитьАтрибут(ИмяАтрибута);
			Атрибут.ПолучитьКоординаты(Х, У, Ш, В);
			
			стрШаблон = "[" + Показатель 
				+ "- тзАтрибуты.ПолучитьЗначение(НомСтрНастроек, """ 
				+ Показатель + """)]"; 
			
			Возврат Шаблон(стрШаблон);
			
		КонецЕсли;	
						
	КонецЕсли;	
	
	Возврат 0;
	
КонецФункции	
//===========================================
Процедура ОбработкаПривязокРеквизитовФормы()
	Перем Х, У, Ш, В;

	Если ЗаписаныПарамерыГлавногоОкна() = 1 Тогда
		
		РасшФорма = СоздатьОбъект("РасширениеФормы");
		РасшФорма.УстановитьФорму(Форма);
		
		НомСтрПривязки = 1;
		Пока НомСтрПривязки <= тзПривязки.КоличествоСтрок() Цикл
			
			тзПривязки.ПолучитьСтрокуПоНомеру(НомСтрПривязки); 
			
			Атрибут = РасшФорма.ПолучитьАтрибут(тзПривязки.ИмяАтрибута);
			Атрибут.ПолучитьКоординаты(Х, У, Ш, В);
			
			НомСтрНастроек = 0;
			Если тзАтрибуты.НайтиЗначение(тзПривязки.ИмяАтрибута, 
				НомСтрНастроек, "ИмяАтрибута") = 1 Тогда
				
				тзАтрибуты.ПолучитьСтрокуПоНомеру(НомСтрНастроек);
				
				Показатель = ?((тзПривязки.Координата = "Х") 
					или (тзПривязки.Координата = "Ш"), "Ш", "В");
					
				Шаблон( "[Присвоить(" + тзПривязки.Координата 
					+ ", тзАтрибуты." + тзПривязки.Координата 
					+ " + ПолучитьПриращение(тзПривязки.Объект, Показатель))]");	
				
			КонецЕсли;	
			
			Атрибут.УстановитьКоординаты(Х, У, Ш, В);
			
			НомСтрПривязки = НомСтрПривязки + 1;
			
		КонецЦикла;
		
		НастроитьРазмерыКарты();

	КонецЕсли;	
	
КонецПроцедуры
//===========================================
Процедура НастройкаДоступаКРеквизитамФормы(Статус)
	Перем НС;
	
	РасшФорма = СоздатьОбъект("РасширениеФормы");
	РасшФорма.УстановитьФорму(Форма);
	
	Если тзСтатусыПереходов.НайтиЗначение(СтатусКарты(), НС, "СтатусКарты") = 1 Тогда
				    
		Для НК = 2 По тзСтатусыПереходов.КоличествоКолонок() Цикл
			
			имяРеквизита = тзСтатусыПереходов.ПолучитьПараметрыКолонки(НК);
			
			Реквизит = РасшФорма.ПолучитьАтрибут(имяРеквизита);
			Реквизит.Доступность = тзСтатусыПереходов.ПолучитьЗначение(НС, НК);
		
		КонецЦикла;
		
		Форма.Обновить();
		
	КонецЕсли;	
	
КонецПроцедуры
//===========================================
// Управление картой
//===========================================
Функция СтатусКарты(Статус = "")
	
	Если Статус <> "" Тогда
		
		Форма.пСтатусКарты.Заголовок(Статус);
		
		НастройкаДоступаКРеквизитамФормы(Статус);
		
	КонецЕсли;	
		
	Возврат Форма.пСтатусКарты.Заголовок();
	
КонецФункции
//===========================================
Процедура ВстроитьБраузер()
	
	АктивИкс = СоздатьОбъект("АктивИкс");
	АктивИкс.УстановитьАтрибут(Форма, "пКарта");
	АктивИкс.СоздатьЭУ("Shell.Explorer.2");
	Браузер = АктивИкс.Объект;
	
КонецПроцедуры
//===========================================
Функция АдресКарты(Адрес)
    Перем Ш, В;
	
	Если (ПустоеЗначение(пАдресСервера) = 0) 
		и (ПустоеЗначение(пКлючКарты) = 0) Тогда
		
		ПолучитьАктуальныеРазмерыКарты(Ш, В);
			
		Адрес = пАдресСервера + "/?apikey="	+ пКлючКарты
			+ "&X=" + пШирота + "&Y=" + пДолгота
			+ "&W=" + (Ш - РазмерОтступа) 
			+ "&H=" + (В - РазмерОтступа);
		
		Возврат 1;
		
	Иначе
		
		Возврат 0;
		
	КонецЕсли;	
	
КонецФункции
//===========================================
Процедура ЗагрузитьКарту()
	Перем Адрес;
	
	Если (ПустоеЗначение(Браузер) = 0) 
		и (АдресКарты(Адрес) = 1) Тогда
	    
		СтатусКарты("ОжиданиеКарты");
		
		Браузер.Navigate(Адрес);
		
	КонецЕсли;	
	
КонецПроцедуры
//===========================================
Процедура ЗадатьРазмерыКарты(Ш, В)
	
	Если СтатусКарты() <> "ОжиданиеКарты" Тогда
					
		Карта.MapResize(Ш - РазмерОтступа, В - РазмерОтступа);
		
	КонецЕсли;	
	
КонецПроцедуры
//===========================================
Функция УстановитьОтметкуНаКарте(Широта, Долгота, Маркер = "", Подсказка = "")
	
	Возврат Карта.AddSimplePoint(Карта.OurYandexMap, 
		Широта, Долгота, Маркер, Подсказка, 1);
	
КонецФункции
//===========================================
Процедура ПоказатьМаршрутыНаКарте(Маршруты)
	
	КолвоМаршрутов = 0;
	
	Для й = 1 По Маршруты.РазмерСписка() Цикл
		
		стрМаршрут = "";
	
		Маршрут = Маршруты.ПолучитьЗначение(й);
		
		Если ТипЗначенияСтр(Маршрут) = "СписокЗначений" Тогда
			
			Для у = 1 По Маршрут.РазмерСписка() Цикл
				
				ГеоОбъект = Маршрут.ПолучитьЗначение(у);
			
				стрМаршрут = стрМаршрут + ?(стрМаршрут = "", "", ",") 
					+ "[" + ПолучитьЗаписьСтруктуры(ГеоОбъект, 
					  "d6p1:lat/#text/value") + ", " 
					+ ПолучитьЗаписьСтруктуры(ГеоОбъект, 
					  "d6p1:lon/#text/value") + "]";
					  
			КонецЦикла;
			
			стрМаршрут = "objRoute = [" + стрМаршрут + "]";	
			
			Карта.ClearAll();
			
			Карта.ShowRoute(Карта.OurYandexMap, стрМаршрут, 
				0, 1, сзЦвета.ПолучитьЗначение(й)); 
			
			КолвоМаршрутов = КолвоМаршрутов + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Сообщить("Показано " + КолвоМаршрутов + " маршрутов");
	
КонецПроцедуры
//===========================================
Процедура УдалитьПунктыДоставкиНаКарте()
	
	тзПунктыДоставки.ВыбратьСтроки();
	Пока тзПунктыДоставки.ПолучитьСтроку() = 1 Цикл
		
		Попытка
			
			Карта.RemovePoint(Карта.OurYandexMap, 
				тзПунктыДоставки.ГеоОбъект);
				
		Исключение
// карта может быть неактивна или имеется другая причина, по которой не сработало			
			Сообщить(ОписаниеОшибки());	
		КонецПопытки;	
		
	КонецЦикла;
	
КонецПроцедуры
//===========================================
Процедура ОтправитьЗапросНаГеокодирование(стрГеокодирования)
		
	Карта.ClearAll();
	Карта.GeocodeArray(Карта.OurYandexMap, стрГеокодирования, мРадиус);
	мВремяЗапроса = _GetPerformanceCounter();
			
КонецПроцедуры
//===========================================
Процедура ОтправитьЗапросНаМаршрутизацию(стрМаршрут)
		
	Карта.ClearAll();
	Карта.ShowRoute(Карта.OurYandexMap, стрМаршрут, 0, 0, "#FFD700");
	мВремяЗапроса = _GetPerformanceCounter();
			
КонецПроцедуры
//===========================================
Функция АнализАдресныхДанных(АдресныеДанные)
	
	тАдресныеДанные = СтрЗаменить(АдресныеДанные, 
		".", РазделительСтрок);
		
	сАнализ = СоздатьОбъект("СписокЗначений");
	сАнализ.Установить("ДанныеРегиона",
		СтрПолучитьСтроку(тАдресныеДанные, 1));	
	сАнализ.Установить("ДанныеВПределахНП",
		СтрПолучитьСтроку(тАдресныеДанные, 2));
		
	Возврат сАнализ;	
	
КонецФункции	
//=========================================== 
Функция ДанныеРегиона(АдресныеДанные)
	
	стрДанныеРегиона = АнализАдресныхДанных(АдресныеДанные)
		.Получить("ДанныеРегиона");
		
	тДанныеРегиона = СтрЗаменить(стрДанныеРегиона,
		",", РазделительСтрок);
		
	стрРезультат = "";
	Для й = 1 По СтрКоличествоСтрок(тДанныеРегиона)	Цикл
		
		стрЭлементДанных = СтрПолучитьСтроку(тДанныеРегиона, й);
		
		Если стрЭлементДанных <> "undefined" Тогда
			
			стрРезультат = стрРезультат + ?(стрРезультат = "", "", ",")
				+ стрЭлементДанных;
			
		КонецЕсли;
		
	КонецЦикла;

	Возврат стрРезультат;	
	
КонецФункции
//=========================================== 
Функция ДанныеВПределахНП(АдресныеДанные)
	
	Возврат АнализАдресныхДанных(АдресныеДанные)
		.Получить("ДанныеВПределахНП");
	
КонецФункции
//===========================================
Функция НомерСтрокиПД(Знач НС)
	
	Возврат сзГеоКоды.Получить(НС);
	
КонецФункции	
//===========================================
Процедура СохранитьРезультатЗапросаНаГеокодирование()
	
	НС = Карта.GeocodeResultsCount; 

	Пока НС > 0 Цикл
        
		тзПунктыДоставки.ПолучитьСтрокуПоНомеру(НомерСтрокиПД(НС)); 
		
		НС = НС - 1;

		Карта.GetGeocodeResult(НС); 
		АдресныеДанные = Карта.UserPointLocation;	

		тзПунктыДоставки.Адрес 	 = ДанныеВПределахНП(АдресныеДанные); 
		тзПунктыДоставки.Область = ДанныеРегиона(АдресныеДанные);
		тзПунктыДоставки.Широта  = Число(Карта.UserPointCoordX);
		тзПунктыДоставки.Долгота = Число(Карта.UserPointCoordY); 

		Если ПустоеЗначение(тзПунктыДоставки.Широта) = 0 Тогда
	    
			тзПунктыДоставки.Уточнен = 1;

		КонецЕсли;			
			
	КонецЦикла; 
			
КонецПроцедуры	
//===========================================
// Prolog
//===========================================
Функция АдресСервиса() 
	
	Возврат пАдресСервера + "/LogSrv/ws/ws1.1cws";
	
КонецФункции	
//===========================================
Функция	ПолучитьСтруктуруИдПоследовательности(ИдПоследовательности)
	
	сзСтруктураИд = СоздатьОбъект("СписокЗначений");
	сзСтруктураИд.ДобавитьЗначение(Сред(ИдПоследовательности, 1, 2));
	сзСтруктураИд.ДобавитьЗначение(Сред(ИдПоследовательности, 4, 3));
	сзСтруктураИд.ДобавитьЗначение(Сред(ИдПоследовательности, 8, 3));
	
	Возврат сзСтруктураИд;
	
КонецФункции	
//===========================================
Функция ПолучитьУзелПоИмени(хмлУзел, хмлРезультат, URIПространстваИмен, nodeName)
	
	хмлВыборкаУзлов = хмлУзел.selectNodes("//*[namespace-uri()='" 
		+ URIПространстваИмен + "' and local-name()='" 
		+ nodeName + "']");

	Если хмлВыборкаУзлов.length = 0 Тогда

		Возврат 0;

	Иначе

		хмлРезультат = хмлВыборкаУзлов.item(0);

		Возврат 1;

	КонецЕсли;
	
КонецФункции	
//===========================================
Функция ПолучитьЗаписьСтруктуры(сзДанные, Путь = "") Экспорт
	
	тПуть = СтрЗаменить(Путь, "/", РазделительСтрок);
	
	Если СтрКоличествоСтрок(тПуть) = 1 Тогда
		
		Возврат сзДанные.Получить(тПуть);
		
	Иначе
		
		стрПуть = "";
		
		ИмяУзла = СтрПолучитьСтроку(тПуть, 1);
		
		КолвоЗначений = СтрКоличествоСтрок(тПуть);
		
		Для П = 2 По КолвоЗначений Цикл
			
			стрПуть = стрПуть + СтрПолучитьСтроку(тПуть, П) 
				+ ?(П = КолвоЗначений, "", "/");
				
		КонецЦикла;
			
		Возврат ПолучитьЗаписьСтруктуры(сзДанные.Получить(ИмяУзла), стрПуть);
		
	КонецЕсли;	
	
КонецФункции	
//===========================================
Процедура ХМЛ2СтруктураДанных(сзДанные, сзПространстваИмен, хмлУзел) Экспорт
	
	Если ТипЗначения(сзДанные) <> 100 Тогда

		сзПространстваИмен = СоздатьОбъект("СписокЗначений");
		сзДанные = СоздатьОбъект("СписокЗначений");
		
	КонецЕсли;
	
	Если хмлУзел.childNodes.length = 0 Тогда
		
		сзДанные.ДобавитьЗначение(хмлУзел.text, "value");
		
	Иначе
		
		Для П = 0 По хмлУзел.childNodes.length - 1 Цикл
			
			сзРеквизит = СоздатьОбъект("СписокЗначений");
			сзДанные.ДобавитьЗначение(сзРеквизит, хмлУзел.childNodes(П).nodeName);
			
			Если ПустоеЗначение(хмлУзел.childNodes(П).prefix) = 0 Тогда
				
				сзПространстваИмен.Установить(хмлУзел.childNodes(П).prefix,
					хмлУзел.childNodes(П).namespaceURI); 
					
			КонецЕсли;		
				
			ХМЛ2СтруктураДанных(сзРеквизит, сзПространстваИмен,
				хмлУзел.childNodes(П));
			
		КонецЦикла;	
		
	КонецЕсли;	
	
КонецПроцедуры
//===========================================
Процедура СтруктураДанных2ХМЛ(сзДанные, сзПространстваИмен, хмлПарсер, хмлКорень, стрПуть="") Экспорт
	Перем ИмяУзла, Префикс, URIПространстваИмен;
	
	Для П1 = 1 По сзДанные.РазмерСписка() Цикл
		
		Значение = сзДанные.ПолучитьЗначение(П1, ИмяУзла);

		Если Прав(ИмяУзла, 8) = "Envelope" Тогда
			
			Результат = СоздатьДокумент(хмлПарсер, "");

			Если Результат = 1 Тогда
				
				хмлПарсер.appendChild(хмлПарсер.createProcessingInstruction("xml", 
					"version='1.0' encoding='windows-1251'"));

				хмлКорень = хмлПарсер.appendChild(хмлПарсер.createElement(ИмяУзла));
			    
				Для П2 = 1 По сзПространстваИмен.РазмерСписка() Цикл
				
					URIПространстваИмен = сзПространстваИмен.ПолучитьЗначение(П2, Префикс);
		
					ДобавитьАтрибут(хмлПарсер, хмлКорень, 
						"xmlns:" + Префикс, URIПространстваИмен);
					
				КонецЦикла;
				
				СтруктураДанных2ХМЛ(Значение, сзПространстваИмен, хмлПарсер, 
					хмлКорень, стрПуть + "/" + ИмяУзла);
				
			КонецЕсли;	
			
		ИначеЕсли ИмяУзла = "#text" Тогда
			
			Попытка
				хмлКорень.text = Значение.ПолучитьЗначение(1);
			Исключение
				Сообщить("Нет данных: " +  стрПуть + "/" + ИмяУзла, "!");
			КонецПопытки;	
			
		ИначеЕсли ТипЗначения(Значение) = 100 Тогда

			хмлУзел = хмлКорень.appendChild(хмлПарсер.createElement(ИмяУзла));
			СтруктураДанных2ХМЛ(Значение, сзПространстваИмен, хмлПарсер, 
				хмлУзел, стрПуть + "/" + ИмяУзла);

		КонецЕсли; 
		
	КонецЦикла;	
	
КонецПроцедуры
//===========================================
Процедура УстановитьЗначениеРеквизитаСтруктурыДанных(сзСтруктураДанных, Значение, Представление)
	
	сзРеквизит = СоздатьОбъект("СписокЗначений");
	сзКлючЗначение = СоздатьОбъект("СписокЗначений");
	сзКлючЗначение.ДобавитьЗначение(Значение);
	сзРеквизит.ДобавитьЗначение(сзКлючЗначение, "#text");
	сзСтруктураДанных.ДобавитьЗначение(сзРеквизит, Представление);
	
КонецПроцедуры
//===========================================
Функция ПолучитьСтруктуруЗаказовРазвозки(ИмяРекВес = "Вес")
	
	сзЗаказы = СоздатьОбъект("СписокЗначений");
	
    НС = тзМаршруты.КоличествоСтрок();
	
	Пока НС > 0 Цикл
	
		тзМаршруты.ПолучитьСтрокуПоНомеру(НС);

		сзЗаказ = СоздатьОбъект("СписокЗначений");
		
		сзОткуда = СоздатьОбъект("СписокЗначений");
		
		УстановитьЗначениеРеквизитаСтруктурыДанных( сзОткуда, 
			Формат(тзМаршруты. ОткудаШирота, "Ч17.13"), "d5p1:lat");
		
		УстановитьЗначениеРеквизитаСтруктурыДанных( сзОткуда, 
		    Формат(тзМаршруты.ОткудаДолгота, "Ч17.13"), "d5p1:lon");
		
		Если ПустоеЗначение(тзМаршруты.ОткудаОбласть) = 0 Тогда
			
			УстановитьЗначениеРеквизитаСтруктурыДанных( сзОткуда, 
				тзМаршруты.ОткудаОбласть, "d5p1:domain");
				
		Конецесли;
		
		сзЗаказ.ДобавитьЗначение(сзОткуда, "d5p1:from");
		
		сзКуда = СоздатьОбъект("СписокЗначений");	
		
		УстановитьЗначениеРеквизитаСтруктурыДанных( сзКуда, 
			Формат(тзМаршруты .КудаШирота, "Ч17.13"), "d5p1:lat");
		
		УстановитьЗначениеРеквизитаСтруктурыДанных( сзКуда, 
		    Формат(тзМаршруты.КудаДолгота, "Ч17.13"), "d5p1:lon");
		
		Если ПустоеЗначение(тзМаршруты.КудаОбласть) = 0 Тогда	
		
			УстановитьЗначениеРеквизитаСтруктурыДанных( сзКуда, 
				тзМаршруты.КудаОбласть, "d5p1:domain");
				
		КонецЕсли;		
		
		сзЗаказ.ДобавитьЗначение(сзКуда, "d5p1:to");
		
		Вес = тзМаршруты.ПолучитьЗначение(НС, ИмяРекВес);
		
		УстановитьЗначениеРеквизитаСтруктурыДанных(сзЗаказ, 
			Цел(Вес), "d5p1:weight");
				
		УстановитьЗначениеРеквизитаСтруктурыДанных(сзЗаказ, 
			тзМаршруты.ИдПоследовательности, "d5p1:sequenceId");
			
		сзЗаказы.ДобавитьЗначение(сзЗаказ, "d5p1:pair"); 
		
		НС = НС - 1;
		
	КонецЦикла;
	
	Возврат сзЗаказы;
	
КонецФункции
//===========================================
Функция ЗапросНаПередачуДанныхПриложения(apiKey, applicationId, Тип, сзМашины, сзЗаказы)
	Перем хмлПарсер, хмлОтвет, сзДанные, сзПространстваИмен;
	
	Если ПрочитатьДокументИзСтроки(хмлПарсер,,, стрТекстЗапроса) = 1 Тогда
		
		ХМЛ2СтруктураДанных(сзДанные, сзПространстваИмен, хмлПарсер);
		
		сзПространстваИмен.Установить("m", 
			"http://api.prolog.city/schema/1.0/ws");
		
		сзТелоЗапроса = ПолучитьЗаписьСтруктуры(сзДанные, 
			"soap:Envelope/soap:Body");
		
		сзПриложение = СоздатьОбъект("СписокЗначений");
		сзТелоЗапроса.ДобавитьЗначение(сзПриложение, ?(applicationId = "", 
			"m:submitApplication", "m:submitAdditionalData"));
		
		УстановитьЗначениеРеквизитаСтруктурыДанных(сзПриложение, 
			apiKey, "apiKey");
		
		Если applicationId <> "" Тогда
			
			УстановитьЗначениеРеквизитаСтруктурыДанных(сзПриложение, 
				applicationId, "applicationId");
			
		КонецЕсли;	
			
		сзДанныеПриложения = СоздатьОбъект("СписокЗначений");
		сзПриложение.ДобавитьЗначение(сзДанныеПриложения, 
			"applicationData");
			
		сзПространстваИмен.Установить("app", 
			"http://api.prolog.city/schema/1.0/application");
			
		УстановитьЗначениеРеквизитаСтруктурыДанных(сзДанныеПриложения, 
			Тип, "app:type");	
		
		сзПространстваИмен.Установить("d5p1", 
			"http://api.prolog.city/schema/1.0/base");	
		
		сзДанныеПриложения.ДобавитьЗначение(сзМашины, "app:vehicles");
				
		сзДанныеПриложения.ДобавитьЗначение(сзЗаказы, "app:pairs");
			
		СтруктураДанных2ХМЛ(сзДанные, 
			сзПространстваИмен, хмлПарсер, "");
		
	КонецЕсли;	
	
	Возврат хмлПарсер;
	
КонецФункции
//===========================================
Функция ЗапросНаПолучениеДанныхПриложения(apiKey, applicationId)
	Перем хмлПарсер, хмлОтвет, сзДанные, сзПространстваИмен;
	
	Если ПрочитатьДокументИзСтроки(хмлПарсер,,, стрТекстЗапроса) = 1 Тогда
		
		ХМЛ2СтруктураДанных(сзДанные, сзПространстваИмен, хмлПарсер);
		
		сзПространстваИмен.Установить("m", 
			"http://api.prolog.city/schema/1.0/ws");
		
		сзТелоЗапроса = ПолучитьЗаписьСтруктуры(сзДанные, 
			"soap:Envelope/soap:Body");
		сзПриложение = СоздатьОбъект("СписокЗначений");
		сзТелоЗапроса.ДобавитьЗначение(сзПриложение, 
			"m:receiveApplication");
		
		УстановитьЗначениеРеквизитаСтруктурыДанных(сзПриложение, 
			apiKey, "apiKey");
		
		УстановитьЗначениеРеквизитаСтруктурыДанных(сзПриложение, 
			applicationId, "applicationId");
		
		СтруктураДанных2ХМЛ(сзДанные, 
			сзПространстваИмен, хмлПарсер, "");
		
	КонецЕсли;	
	
	Возврат хмлПарсер;
	
КонецФункции	
//===========================================
Функция submitApplicationRequest(apiKey, Тип, сзМашины, сзЗаказы, Адрес)
	Перем хмлОтвет, сзДанные, сзПространстваИмен, сзРезультат;
	
	хмлЗапрос = ЗапросНаПередачуДанныхПриложения(apiKey, "",
		Тип, сзМашины, сзЗаказы);
		
	сзЗапрос = СоздатьОбъект("СписокЗначений");
	
	сзЗапрос.Установить("Адрес", 			Адрес);
	сзЗапрос.Установить("ТекстЗапроса", 	хмлЗапрос);
	
	Если ВыполнитьЗапрос(сзЗапрос, хмлОтвет) = 1 Тогда
		
		ХМЛ2СтруктураДанных(сзДанные, сзПространстваИмен, хмлОтвет);
		
		сзРезультат = СоздатьОбъект("СписокЗначений");
		
		сзРезультат.Установить("Данные", 				сзДанные); 
		сзРезультат.Установить("URIПространстваИмен", 	сзПространстваИмен);
		
	Иначе
		
		Сообщить(хмлОтвет.xml);
		
	КонецЕсли;	
	
	Возврат сзРезультат;	
	
КонецФункции
//===========================================
Функция receiveApplicationRequest(apiKey, applicationId, Адрес)
	Перем хмлОтвет, сзДанные, сзПространстваИмен, сзРезультат;
	
	хмлЗапрос = ЗапросНаПолучениеДанныхПриложения(apiKey, applicationId);
		
	сзЗапрос = СоздатьОбъект("СписокЗначений");
	
	сзЗапрос.Установить("Адрес", 			Адрес);
	сзЗапрос.Установить("ТекстЗапроса", 	хмлЗапрос);
	
	Если ВыполнитьЗапрос(сзЗапрос, хмлОтвет) = 1 Тогда
		
		ХМЛ2СтруктураДанных(сзДанные, сзПространстваИмен, хмлОтвет);
		
		сзРезультат = СоздатьОбъект("СписокЗначений");
		
		сзРезультат.Установить("Данные", 				сзДанные); 
		сзРезультат.Установить("URIПространстваИмен", 	сзПространстваИмен);
		
	Иначе
		
		Сообщить(хмлОтвет.xml);
		
	КонецЕсли;	
	
	Возврат сзРезультат;

КонецФункции	
//===========================================
Функция submitAdditionalDataRequest(apiKey, applicationId, Тип, сзМашины, сзЗаказы, Адрес)
	Перем хмлОтвет, сзДанные, сзПространстваИмен, сзРезультат;
	
	хмлЗапрос = ЗапросНаПередачуДанныхПриложения(apiKey, applicationId,
		Тип, сзМашины, сзЗаказы);
		
	сзЗапрос = СоздатьОбъект("СписокЗначений");
	
	сзЗапрос.Установить("Адрес", 			Адрес);
	сзЗапрос.Установить("ТекстЗапроса", 	хмлЗапрос);
	
	Если ВыполнитьЗапрос(сзЗапрос, хмлОтвет) = 1 Тогда
		
		ХМЛ2СтруктураДанных(сзДанные, сзПространстваИмен, хмлОтвет);
		
		сзРезультат = СоздатьОбъект("СписокЗначений");
		
		сзРезультат.Установить("Данные", 				сзДанные); 
		сзРезультат.Установить("URIПространстваИмен", 	сзПространстваИмен);
		
	Иначе
		
		Сообщить(хмлОтвет.xml);
		
	КонецЕсли;	
	
	Возврат сзРезультат;	
	
КонецФункции
//===========================================
Процедура ПередатьДанныеПриложения(стрТипЗапроса, сзМашины, сзЗаказы)
    
	ДанныеПриложения = submitApplicationRequest(пКлючПриложения, 
		стрТипЗапроса, сзМашины, сзЗаказы, АдресСервиса());
		
	стрИдЗапроса = ПолучитьЗаписьСтруктуры(ДанныеПриложения.Получить("Данные"), 
		"soap:Envelope/soap:Body/m:submitApplicationResponse/m:return/id/#text/value");
		
	СтатусКарты("ОжиданиеСервера");
	
	Браузер.Document.parentWindow.LatestEvent = "BackgroundTask";

	Сообщить("Отправлен новый запрос на сервер логистики");	
	
КонецПроцедуры
//===========================================
Процедура ПередатьДополнительныеДанныеПриложения(стрТипЗапроса, сзМашины, сзЗаказы)
	
	ДанныеПриложения = submitAdditionalDataRequest(пКлючПриложения, стрИдЗапроса,
		стрТипЗапроса, сзМашины, сзЗаказы, АдресСервиса());
	
	СтатусКарты("ОжиданиеСервера");
	
	Браузер.Document.parentWindow.LatestEvent = "BackgroundTask";
	
	Сообщить("Отправлены доп. данные к запросу на сервер логистики");
		
КонецПроцедуры
//===========================================
Процедура ОбработатьУспехВыполненияЗапросаНаСервере(ДанныеПриложения)
	
	Маршруты = ПолучитьЗаписьСтруктуры(ДанныеПриложения.Получить("Данные"), 
		"soap:Envelope/soap:Body/m:receiveApplicationResponse/m:return/routes");
	
	ПоказатьМаршрутыНаКарте(Маршруты);
	
	СтатусКарты("Готово");
		
	Карта.LatestEvent = "";
	
	Сообщить("Запрос на сервере логистики выполнен и обработан на стороне обработки");
	
КонецПроцедуры	
//===========================================
Процедура ОбработатьЗапросНаПредоставлениеДополнительныхДанных(ДанныеПриложения)
	
	Сообщить("Обработка запроса на сервере логистики требует предоставления дополнительных данных");
	
	Пары = ПолучитьЗаписьСтруктуры(ДанныеПриложения.Получить("Данные"), 
		"soap:Envelope/soap:Body/m:receiveApplicationResponse/m:return/pairs");
	
	тзМаршруты.УдалитьСтроки();
	
	Для П = 1 По Пары.РазмерСписка() Цикл
		
		Запись = Пары.ПолучитьЗначение(П);
		
		тзМаршруты.НоваяСтрока();
		тзМаршруты.ОткудаШирота 
			= ПолучитьЗаписьСтруктуры(Запись, 
				"d5p1:from/d5p1:lat/#text/value"); 
		тзМаршруты.ОткудаДолгота 
			= ПолучитьЗаписьСтруктуры(Запись, 
				"d5p1:from/d5p1:lon/#text/value");
		тзМаршруты.ОткудаОбласть 
			= ПолучитьЗаписьСтруктуры(Запись, 
				"d5p1:from/d5p1:domain/#text/value");
		тзМаршруты.КудаШирота    
			= ПолучитьЗаписьСтруктуры(Запись, 
				"d5p1:to/d5p1:lat/#text/value");
		тзМаршруты.КудаДолгота   
			= ПолучитьЗаписьСтруктуры(Запись, 
				"d5p1:to/d5p1:lon/#text/value");
		тзМаршруты.КудаОбласть   
			= ПолучитьЗаписьСтруктуры(Запись, 
				"d5p1:to/d5p1:domain/#text/value");
		тзМаршруты.Вес
			= ПолучитьЗаписьСтруктуры(Запись, 
				"d5p1:weight/#text/value");
		тзМаршруты.ИдПоследовательности
			= ПолучитьЗаписьСтруктуры(Запись, 
				"d5p1:sequenceId/#text/value");
		тзМаршруты.Маршрут	= "НеРассчитан";
		
	КонецЦикла;	
	
	тзМаршруты.Сортировать("ИдПоследовательности");
	
    ПостроитьМаршрутыНачало();
	
КонецПроцедуры	
//===========================================
Процедура ОбработатьОшибкуВыполненияЗапросаНаСервере(ДанныеПриложения)
	
	СтатусКарты("Готово");
		
	Карта.LatestEvent = "";
	
	Сообщить("В ходе обработки запроса на сервере логистики возникли ошибки");
	
КонецПроцедуры	
//===========================================
Процедура ПолучитьДанныеПриложения()
		
	ДанныеПриложения = receiveApplicationRequest(пКлючПриложения, стрИдЗапроса, АдресСервиса());
		
	СтатусПриложения = ПолучитьЗаписьСтруктуры(ДанныеПриложения.Получить("Данные"), 
		"soap:Envelope/soap:Body/m:receiveApplicationResponse/m:return/status/#text/value");
	
	Если СтатусПриложения = "COMPLETED" Тогда
		
		ОбработатьУспехВыполненияЗапросаНаСервере(ДанныеПриложения);
		
	ИначеЕсли СтатусПриложения = "DATA_REQUESTED" Тогда
		
		ОбработатьЗапросНаПредоставлениеДополнительныхДанных(ДанныеПриложения);
		
	ИначеЕсли СтатусПриложения = "REJECTED" Тогда
		
		ОбработатьОшибкуВыполненияЗапросаНаСервере(ДанныеПриложения);
		
	ИначеЕсли СтатусПриложения = "IN_PROCESS" Тогда
		
		Сообщить("Логистический запрос в процессе обработки на сервере");
	
	КонецЕсли;
	
КонецПроцедуры
//===========================================
Процедура ОтправитьНовыйЗапросНаСервер();
	
	сзМашины = СоздатьОбъект("СписокЗначений");
	
	сзМашина = СоздатьОбъект("СписокЗначений");
	
	УстановитьЗначениеРеквизитаСтруктурыДанных(сзМашина, 
		1500, "d5p1:weight");
	
	сзМашины.ДобавитьЗначение(сзМашина, "d5p1:vehicle");
	
    сзЗаказы = ПолучитьСтруктуруЗаказовРазвозки("Вес");		
		
	ПередатьДанныеПриложения("ROUTING", сзМашины, сзЗаказы);
	
КонецПроцедуры	
//===========================================
// Обработчики событий
//===========================================
Процедура ИндикаторВыполнения()
	
	ТекВремяСМоментаЗапроса = _GetPerformanceCounter() - мВремяЗапроса;
	Период = ТекВремяСМоментаЗапроса / 1000;
	Время  = Период - Цел(Период);	
	
	Если Время < 0.25 Тогда 
		стрЗаголовок = "[" + Симв(150) + "] Журнал";
	ИначеЕсли Время < 0.5 Тогда
		стрЗаголовок = "[\] Журнал";
	ИначеЕсли Время < 0.75 Тогда
		стрЗаголовок = "[ "  + Симв(108) + "] Журнал";
	Иначе
		стрЗаголовок = "[/] Журнал";
	КонецЕсли;	
	
	Форма.грЖурнал.Заголовок(стрЗаголовок); 
	
КонецПроцедуры
//===========================================
Процедура ПоЗавершениюЗагрузкиКарты()
	
	СтатусКарты("Готово");
		
	Карта = Браузер.Document.parentWindow;
	
КонецПроцедуры
//===========================================
Процедура ПриВыбореТочкиНаКарте()
	
	ОтобразитьНаФормеРезультатВыбораТочкиНаКарте();
		
	Если СтатусКарты() = "Подбор" Тогда

		ОбработатьРезультатПодбораПунктаДоставки();	
		
	КонецЕсли;
	
КонецПроцедуры
//===========================================
Процедура ПриЗавершенииОперацииГеокодирования()
	
	СохранитьРезультатЗапросаНаГеокодирование();
		
	ВыполнитьГеокодированиеИтерация();
			
КонецПроцедуры
//===========================================
Процедура ПриЗавершенииОперацииПостроенияМаршрута()
	
	Если СтатусКарты() = "ПостроениеМаршрутов" Тогда

		ПостроитьМаршрутыИтерация();
		
	КонецЕсли;
	
КонецПроцедуры
//===========================================
Процедура ПриВыполненииФоновогоЗадания()
	
	Если СтатусКарты() = "ОжиданиеСервера" Тогда
		
		Если _GetPerformanceCounter() - мВремяЗапроса 
			> пПериодОжидания Тогда
		
			ПолучитьДанныеПриложения();
			
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры
//===========================================
Процедура ПриНачалеПодбораПунктовДоставки()
	
	СтатусКарты("Подбор");
	
	Форма.кнПодбор.Заголовок("Готово");
	
	ПодготовитьТаблицы();
	
КонецПроцедуры	
//===========================================
Процедура ПриЗавершенииПодбораПунктовДоставки()
	
	Форма.кнПодбор.Заголовок("Подбор");
	
	ВыполнитьГеокодированиеНачало();
	
КонецПроцедуры
//===========================================
Процедура ЗагрузитьДанныеИзФайла(ПолноеИмяФайла)
	
	СтатусКарты("Загрузка");
		
	ЗагрузитьМаршрутыИзФайла(ПолноеИмяФайла);
				
	ВыполнитьГеокодированиеНачало();
	
КонецПроцедуры
//===========================================
Процедура ПриНачалеАвтоПодбораПунктовДоставки()
	
	СтатусКарты("АвтоПодбор");

	ПодготовитьТаблицы();
	
	АвтоПодборПунктовДоставки();
	
КонецПроцедуры
//===========================================
Процедура ПриОбновленииДанныхТаблицыМаршрутов()
	
	Если СтатусКарты() <> "Подбор" Тогда
		
		ПоказатьПунктыДоставкиНаКарте();
		
	КонецЕсли;
	
	СтатусКарты("Готово");	
		
КонецПроцедуры		
//===========================================
Процедура ОбработатьСобытие(Событие)
		
	Если Событие = "MapReady" Тогда
		
		ПоЗавершениюЗагрузкиКарты();
	
	ИначеЕсли Событие = "UserPointing" Тогда
		
		ПриВыбореТочкиНаКарте();
		
	ИначеЕсли Событие = "GeocodingDone" Тогда
		
		ПриЗавершенииОперацииГеокодирования(); 
		
	ИначеЕсли Событие = "GetRoute" Тогда
		
		ПриЗавершенииОперацииПостроенияМаршрута();
		
	ИначеЕсли Событие = "BackgroundTask" Тогда
		
		ПриВыполненииФоновогоЗадания();	
		
	КонецЕсли;	
	
КонецПроцедуры	
//===========================================
Процедура ОбработатьПрерывание(Событие)
	
	Если ПустоеЗначение(Событие) = 0 Тогда
		
		Если Событие <> "BackgroundTask" Тогда
// сбросим, чтобы не мешал обрабатывать дальше своими повторными вызовами
			Браузер.Document.parentWindow.LatestEvent = "";
		
		КонецЕсли;

		ОбработатьСобытие(Событие);
		
	Иначе		
		
		
	КонецЕсли;	
	
КонецПроцедуры	
//===========================================
Процедура ОжиданиеСобытийКарты()
    Перем Событие;
	
	ИндикаторВыполнения();
	
	Попытка 
		
		Событие = Браузер.Document.parentWindow.LatestEvent;
		
	Исключение
// ожидание инициализации объектов карты		
		Возврат;
		
	КонецПопытки;
	
	ОбработатьПрерывание(Событие);
	
КонецПроцедуры	
//===========================================
Процедура ЗапускОжиданияСобытийКарты()
	
	мРасшФорма = СоздатьОбъект("РасширениеФормы");
	мРасшФорма.ОбработкаОжидания("ОжиданиеСобытийКарты", пПериодОпроса);
	
КонецПроцедуры
//===========================================
// Интерфейс
//===========================================
Функция ВыбратьФайл(ИмяФайла, ИмяКаталога)
	
	Возврат ФС.ВыбратьФайл(0, ИмяФайла, ИмяКаталога, 
		"Файл для загрузки", "Текстовые файлы (*.txt) |*.txt");
	
КонецФункции
//===========================================
Процедура ПриОткрытии()
	
КонецПроцедуры
//===========================================
Процедура ПослеОткрытия()
	
	ЗадатьНачальныеНастройки();

	СтатусКарты("ОжиданиеКарты");
	
	СохранитьПараметрыГлавногоОкна();
	
	ЗапускОжиданияСобытийКарты();
	
	ВстроитьБраузер();
	
	ЗагрузитьКарту();
	
КонецПроцедуры
//===========================================
Процедура ПриИзмененииРазмераОкна(ТипСобытия, Ширина, Высота)
	
	ОбработкаПривязокРеквизитовФормы();
		
КонецПроцедуры
//===========================================
Процедура ПоКнопкеПодбор()
	
	Если СтатусКарты() = "Готово" Тогда
	
		ПриНачалеПодбораПунктовДоставки();
		
	Иначе
		
		ПриЗавершенииПодбораПунктовДоставки();
		
	КонецЕсли;	

КонецПроцедуры
//===========================================
Процедура ПоКнопкеЗагрузить()
	Перем ИмяФайла, ИмяКаталога;
	
	Если ВыбратьФайл(ИмяФайла, ИмяКаталога) = 1 Тогда
		
		ЗагрузитьДанныеИзФайла(ИмяКаталога + ИмяФайла);
		
	КонецЕсли;
	
КонецПроцедуры
//===========================================
Процедура ПоКнопкеВыгрузить()
	
	ВыгрузитьМаршрутыВФайл();
	
КонецПроцедуры
//===========================================
Процедура ПоКнопкеАвтоПодбор()
	
	ПриНачалеАвтоПодбораПунктовДоставки(); 
	
КонецПроцедуры	
//===========================================
Процедура ПоКнопкеЗапрос()
	
	ОтправитьНовыйЗапросНаСервер();
		
КонецПроцедуры	
//===========================================
// ХМЛ
//===========================================
// HTTP Request
//===========================================
// Модель развозки
//===========================================
Математика = СоздатьОбъект("Math");
сзСлЧис = СоздатьОбъект("СписокЗначений");
сзГеоКоды = СоздатьОбъект("СписокЗначений");
мРадиус = 5;

тзПунктыДоставки = СоздатьОбъект("ТаблицаЗначений");
тзПунктыДоставки.НоваяКолонка("Ид");
тзПунктыДоставки.НоваяКолонка("Широта"); 
тзПунктыДоставки.НоваяКолонка("Долгота");
тзПунктыДоставки.НоваяКолонка("Адрес");
тзПунктыДоставки.НоваяКолонка("Область"); 
тзПунктыДоставки.НоваяКолонка("Уточнен");
тзПунктыДоставки.НоваяКолонка("ГеоОбъект");

тзМаршруты = СоздатьОбъект("ТаблицаЗначений"); 
тзМаршруты.НоваяКолонка("Вес");
тзМаршруты.НоваяКолонка("Объем");
тзМаршруты.НоваяКолонка("ОткудаИд"); 
тзМаршруты.НоваяКолонка("ОткудаШирота"); 
тзМаршруты.НоваяКолонка("ОткудаДолгота");
тзМаршруты.НоваяКолонка("ОткудаАдрес");
тзМаршруты.НоваяКолонка("ОткудаОбласть");
тзМаршруты.НоваяКолонка("КудаИд"); 
тзМаршруты.НоваяКолонка("КудаШирота");
тзМаршруты.НоваяКолонка("КудаДолгота");
тзМаршруты.НоваяКолонка("КудаАдрес");
тзМаршруты.НоваяКолонка("КудаОбласть");
тзМаршруты.НоваяКолонка("Маршрут"); 
тзМаршруты.НоваяКолонка("Расстояние"); 
тзМаршруты.НоваяКолонка("ИдПоследовательности");
//===========================================
// Управление элементами формы
//===========================================
сзЦвета = СоздатьОбъект("СписокЗначений");
сзЦвета.ДобавитьЗначение("#0000FF"); 
сзЦвета.ДобавитьЗначение("#00FFFF");
сзЦвета.ДобавитьЗначение("#008000");
сзЦвета.ДобавитьЗначение("#00FF00");
сзЦвета.ДобавитьЗначение("#808000");
сзЦвета.ДобавитьЗначение("#800000");
сзЦвета.ДобавитьЗначение("#FF0000");
сзЦвета.ДобавитьЗначение("#800080");
сзЦвета.ДобавитьЗначение("#FF00FF");
сзЦвета.ДобавитьЗначение("#808080");
сзЦвета.ДобавитьЗначение(8000000, "Синий");
сзЦвета.ДобавитьЗначение(30000, "Зеленый");
сзЦвета.ДобавитьЗначение(1000,  "Красный");

тзАтрибуты = СоздатьОбъект("ТаблицаЗначений");
тзАтрибуты.НоваяКолонка("ИмяАтрибута"); 
тзАтрибуты.НоваяКолонка("Х", "Число");
тзАтрибуты.НоваяКолонка("У", "Число");
тзАтрибуты.НоваяКолонка("Ш", "Число");
тзАтрибуты.НоваяКолонка("В", "Число");
//===========================================
// Управление картой
//===========================================
РазмерОтступа = 16;	
//===========================================
// Prolog
//===========================================
стрТекстЗапроса = "<soap:Envelope 
| xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/""
| xmlns:m=""http://api.prolog.city/schema/1.0/ws"" 
| xmlns:d5p1=""http://api.prolog.city/schema/1.0/base"">
|	<soap:Body/>
|</soap:Envelope>
|";
//===========================================
// Обработчики событий
//===========================================
мВремяЗапроса = 0;
//===========================================
// Интерфейс
//===========================================